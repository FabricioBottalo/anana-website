{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "63db928f-5c99-4362-afc5-458d7882eac2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✓ data/Base.json y data/Inf_Mensual.json actualizados.\n"
     ]
    }
   ],
   "source": [
    "import urllib.parse\n",
    "import requests\n",
    "import pandas as pd\n",
    "import io\n",
    "import os\n",
    "import re\n",
    "import json\n",
    "from datetime import datetime\n",
    "\n",
    "API_BASE_URL = \"https://apis.datos.gob.ar/series/api/\"\n",
    "\n",
    "# ---- Lista de series que pasaste: id -> alias (campo legible)\n",
    "SERIES = {\n",
    "    \"146.3_IALIMENUYO_DICI_M_41\": \"ipc_alimentos_bebidas_no_alcoholicas_cuyo\",\n",
    "    \"146.3_IALIMENGBA_DICI_M_40\": \"ipc_alimentos_bebidas_no_alcoholicas_gba\",\n",
    "    \"146.3_IALIMENNAL_DICI_M_45\": \"ipc_alimentos_bebidas_no_alcoholicas_nacional\",\n",
    "    \"146.3_IALIMENNEA_DICI_M_40\": \"ipc_alimentos_bebidas_no_alcoholicas_nea\",\n",
    "    \"146.3_IALIMENNOA_DICI_M_40\": \"ipc_alimentos_bebidas_no_alcoholicas_noa\",\n",
    "    \"146.3_IALIMENANA_DICI_M_45\": \"ipc_alimentos_bebidas_no_alcoholicas_pampeana\",\n",
    "    \"146.3_IALIMENNIA_DICI_M_46\": \"ipc_alimentos_bebidas_no_alcoholicas_patagonia\",\n",
    "    \"146.3_IBEBIDAUYO_DICI_M_35\": \"ipc_bebidas_alcoholicas_tabaco_cuyo\",\n",
    "    \"146.3_IBEBIDAGBA_DICI_M_34\": \"ipc_bebidas_alcoholicas_tabaco_gba\",\n",
    "    \"146.3_IBEBIDANAL_DICI_M_39\": \"ipc_bebidas_alcoholicas_tabaco_nacional\",\n",
    "    \"146.3_IBEBIDANEA_DICI_M_34\": \"ipc_bebidas_alcoholicas_tabaco_nea\",\n",
    "    \"146.3_IBEBIDANOA_DICI_M_34\": \"ipc_bebidas_alcoholicas_tabaco_noa\",\n",
    "    \"146.3_IBEBIDAANA_DICI_M_39\": \"ipc_bebidas_alcoholicas_tabaco_pampeana\",\n",
    "    \"146.3_IBEBIDANIA_DICI_M_40\": \"ipc_bebidas_alcoholicas_tabaco_patagonia\",\n",
    "    \"146.3_IBIENESUYO_DICI_M_32\": \"ipc_bienes_servicios_varios_cuyo\",\n",
    "    \"146.3_IBIENESGBA_DICI_M_31\": \"ipc_bienes_servicios_varios_gba\",\n",
    "    \"146.3_IBIENESNAL_DICI_M_36\": \"ipc_bienes_servicios_varios_nacional\",\n",
    "    \"146.3_IBIENESNEA_DICI_M_31\": \"ipc_bienes_servicios_varios_nea\",\n",
    "    \"146.3_IBIENESNOA_DICI_M_31\": \"ipc_bienes_servicios_varios_noa\",\n",
    "    \"146.3_IBIENESANA_DICI_M_36\": \"ipc_bienes_servicios_varios_pampeana\",\n",
    "    \"146.3_IBIENESNIA_DICI_M_37\": \"ipc_bienes_servicios_varios_patagonia\",\n",
    "    \"146.3_ICOMUNIUYO_DICI_M_23\": \"ipc_comunicaciones_cuyo\",\n",
    "    \"146.3_ICOMUNIGBA_DICI_M_22\": \"ipc_comunicaciones_gba\",\n",
    "    \"146.3_ICOMUNINAL_DICI_M_27\": \"ipc_comunicaciones_nacional\",\n",
    "    \"146.3_ICOMUNINEA_DICI_M_22\": \"ipc_comunicaciones_nea\",\n",
    "    \"146.3_ICOMUNINOA_DICI_M_22\": \"ipc_comunicaciones_noa\",\n",
    "    \"146.3_ICOMUNIANA_DICI_M_27\": \"ipc_comunicaciones_pampeana\",\n",
    "    \"146.3_ICOMUNINIA_DICI_M_28\": \"ipc_comunicaciones_patagonia\",\n",
    "    \"146.3_IEDUCACUYO_DICI_M_18\": \"ipc_educacion_cuyo\",\n",
    "    \"146.3_IEDUCACGBA_DICI_M_17\": \"ipc_educacion_gba\",\n",
    "    \"146.3_IEDUCACNAL_DICI_M_22\": \"ipc_educacion_nacional\",\n",
    "    \"146.3_IEDUCACNEA_DICI_M_17\": \"ipc_educacion_nea\",\n",
    "    \"146.3_IEDUCACNOA_DICI_M_17\": \"ipc_educacion_noa\",\n",
    "    \"146.3_IEDUCACANA_DICI_M_22\": \"ipc_educacion_pampeana\",\n",
    "    \"146.3_IEDUCACNIA_DICI_M_23\": \"ipc_educacion_patagonia\",\n",
    "    \"146.3_IEQUIPAUYO_DICI_M_42\": \"ipc_equipamiento_mantenimientos_hogar_cuyo\",\n",
    "    \"146.3_IEQUIPAGBA_DICI_M_41\": \"ipc_equipamiento_mantenimientos_hogar_gba\",\n",
    "    \"146.3_IEQUIPANAL_DICI_M_46\": \"ipc_equipamiento_mantenimientos_hogar_nacional\",\n",
    "    \"146.3_IEQUIPANEA_DICI_M_41\": \"ipc_equipamiento_mantenimientos_hogar_nea\",\n",
    "    \"146.3_IEQUIPANOA_DICI_M_41\": \"ipc_equipamiento_mantenimientos_hogar_noa\",\n",
    "    \"146.3_IEQUIPAANA_DICI_M_46\": \"ipc_equipamiento_mantenimientos_hogar_pampeana\",\n",
    "    \"146.3_IEQUIPANIA_DICI_M_47\": \"ipc_equipamiento_mantenimientos_hogar_patagonia\",\n",
    "    # Tasas de variación (solo si querés usarlas para NG en Inf_Mensual):\n",
    "    \"145.3_INGCUYUAL_DICI_M_34\": \"ipc_ng_cuyo_tasa_variacion_mensual\",\n",
    "    \"145.3_INGGBAUAL_DICI_M_33\": \"ipc_ng_gba_tasa_variacion_mensual\",\n",
    "    \"145.3_INGNACUAL_DICI_M_38\": \"ipc_ng_nacional_tasa_variacion_mensual\",\n",
    "    \"145.3_INGNEAUAL_DICI_M_33\": \"ipc_ng_nea_tasa_variacion_mensual\",\n",
    "    \"145.3_INGNOAUAL_DICI_M_33\": \"ipc_ng_noa_tasa_variacion_mensual\",\n",
    "    \"145.3_INGPAMUAL_DICI_M_38\": \"ipc_ng_pampeana_tasa_variacion_mensual\",\n",
    "    \"145.3_INGPATUAL_DICI_M_39\": \"ipc_ng_patagonia_tasa_variacion_mensual\",\n",
    "    # Índice Nivel general (para Base.json y/o para pct_change en Inf_Mensual):\n",
    "    \"148.3_INIVELUYO_DICI_M_22\": \"ipc_nivel_general_cuyo\",\n",
    "    \"148.3_INIVELGBA_DICI_M_21\": \"ipc_nivel_general_gba\",\n",
    "    \"148.3_INIVELNAL_DICI_M_26\": \"ipc_nivel_general_nacional\",\n",
    "    \"148.3_INIVELNEA_DICI_M_21\": \"ipc_nivel_general_nea\",\n",
    "    \"148.3_INIVELNOA_DICI_M_21\": \"ipc_nivel_general_noa\",\n",
    "    \"148.3_INIVELANA_DICI_M_26\": \"ipc_nivel_general_pampeana\",\n",
    "    \"148.3_INIVELNIA_DICI_M_27\": \"ipc_nivel_general_patagonia\",\n",
    "    \"146.3_IPRENDAUYO_DICI_M_31\": \"ipc_prendas_vestir_calzado_cuyo\",\n",
    "    \"146.3_IPRENDAGBA_DICI_M_30\": \"ipc_prendas_vestir_calzado_gba\",\n",
    "    \"146.3_IPRENDANAL_DICI_M_35\": \"ipc_prendas_vestir_calzado_nacional\",\n",
    "    \"146.3_IPRENDANEA_DICI_M_30\": \"ipc_prendas_vestir_calzado_nea\",\n",
    "    \"146.3_IPRENDANOA_DICI_M_30\": \"ipc_prendas_vestir_calzado_noa\",\n",
    "    \"146.3_IPRENDAANA_DICI_M_35\": \"ipc_prendas_vestir_calzado_pampeana\",\n",
    "    \"146.3_IPRENDANIA_DICI_M_36\": \"ipc_prendas_vestir_calzado_patagonia\",\n",
    "    \"146.3_IRECREAUYO_DICI_M_27\": \"ipc_recreacion_cultura_cuyo\",\n",
    "    \"146.3_IRECREAGBA_DICI_M_26\": \"ipc_recreacion_cultura_gba\",\n",
    "    \"146.3_IRECREANAL_DICI_M_31\": \"ipc_recreacion_cultura_nacional\",\n",
    "    \"146.3_IRECREANEA_DICI_M_26\": \"ipc_recreacion_cultura_nea\",\n",
    "    \"146.3_IRECREANOA_DICI_M_26\": \"ipc_recreacion_cultura_noa\",\n",
    "    \"146.3_IRECREAANA_DICI_M_31\": \"ipc_recreacion_cultura_pampeana\",\n",
    "    \"146.3_IRECREANIA_DICI_M_32\": \"ipc_recreacion_cultura_patagonia\",\n",
    "    \"146.3_IRESTAUUYO_DICI_M_29\": \"ipc_restaurantes_hoteles_cuyo\",\n",
    "    \"146.3_IRESTAUGBA_DICI_M_28\": \"ipc_restaurantes_hoteles_gba\",\n",
    "    \"146.3_IRESTAUNAL_DICI_M_33\": \"ipc_restaurantes_hoteles_nacional\",\n",
    "    \"146.3_IRESTAUNEA_DICI_M_28\": \"ipc_restaurantes_hoteles_nea\",\n",
    "    \"146.3_IRESTAUNOA_DICI_M_28\": \"ipc_restaurantes_hoteles_noa\",\n",
    "    \"146.3_IRESTAUANA_DICI_M_33\": \"ipc_restaurantes_hoteles_pampeana\",\n",
    "    \"146.3_IRESTAUNIA_DICI_M_34\": \"ipc_restaurantes_hoteles_patagonia\",\n",
    "    \"146.3_ISALUDUYO_DICI_M_14\": \"ipc_salud_cuyo\",\n",
    "    \"146.3_ISALUDGBA_DICI_M_13\": \"ipc_salud_gba\",\n",
    "    \"146.3_ISALUDNAL_DICI_M_18\": \"ipc_salud_nacional\",\n",
    "    \"146.3_ISALUDNEA_DICI_M_13\": \"ipc_salud_nea\",\n",
    "    \"146.3_ISALUDNOA_DICI_M_13\": \"ipc_salud_noa\",\n",
    "    \"146.3_ISALUDANA_DICI_M_18\": \"ipc_salud_pampeana\",\n",
    "    \"146.3_ISALUDNIA_DICI_M_19\": \"ipc_salud_patagonia\",\n",
    "    \"146.3_ITRANSPUYO_DICI_M_19\": \"ipc_transporte_cuyo\",\n",
    "    \"146.3_ITRANSPGBA_DICI_M_18\": \"ipc_transporte_gba\",\n",
    "    \"146.3_ITRANSPNAL_DICI_M_23\": \"ipc_transporte_nacional\",\n",
    "    \"146.3_ITRANSPNEA_DICI_M_18\": \"ipc_transporte_nea\",\n",
    "    \"146.3_ITRANSPNOA_DICI_M_18\": \"ipc_transporte_noa\",\n",
    "    \"146.3_ITRANSPANA_DICI_M_23\": \"ipc_transporte_pampeana\",\n",
    "    \"146.3_ITRANSPNIA_DICI_M_24\": \"ipc_transporte_patagonia\",\n",
    "    \"146.3_IVIVIENUYO_DICI_M_48\": \"ipc_vivienda_agua_electricidad_combustibles_cuyo\",\n",
    "    \"146.3_IVIVIENGBA_DICI_M_47\": \"ipc_vivienda_agua_electricidad_combustibles_gba\",\n",
    "    \"146.3_IVIVIENNAL_DICI_M_52\": \"ipc_vivienda_agua_electricidad_combustibles_nacional\",\n",
    "    \"146.3_IVIVIENNEA_DICI_M_47\": \"ipc_vivienda_agua_electricidad_combustibles_nea\",\n",
    "    \"146.3_IVIVIENNOA_DICI_M_47\": \"ipc_vivienda_agua_electricidad_combustibles_noa\",\n",
    "    \"146.3_IVIVIENANA_DICI_M_52\": \"ipc_vivienda_agua_electricidad_combustibles_pampeana\",\n",
    "    \"146.3_IVIVIENNIA_DICI_M_53\": \"ipc_vivienda_agua_electricidad_combustibles_patagonia\",\n",
    "}\n",
    "\n",
    "REGION_MAP = {\n",
    "    \"nacional\": \"Nacional\",\n",
    "    \"gba\": \"GBA\",\n",
    "    \"pampeana\": \"Pampeana\",\n",
    "    \"nea\": \"NEA\",\n",
    "    \"noa\": \"NOA\",\n",
    "    \"cuyo\": \"Cuyo\",\n",
    "    \"patagonia\": \"Patagonia\",\n",
    "}\n",
    "\n",
    "MONTHS_ES = [\n",
    "    \"Enero\",\"Febrero\",\"Marzo\",\"Abril\",\"Mayo\",\"Junio\",\n",
    "    \"Julio\",\"Agosto\",\"Septiembre\",\"Octubre\",\"Noviembre\",\"Diciembre\"\n",
    "]\n",
    "\n",
    "\n",
    "CATEGORIES_MAP = {\n",
    "    \"alimentos_bebidas_no_alcoholicas\": \"Alimentos_y_bebidas_no_alcoholicas\",\n",
    "    \"bebidas_alcoholicas_tabaco\": \"Bebidas_alcoholicas_y_tabaco\",\n",
    "    \"bienes_servicios_varios\": \"Bienes_y_servicios_varios\",\n",
    "    \"comunicaciones\": \"Comunicacion\",\n",
    "    \"comunicacion\": \"Comunicacion\",\n",
    "    \"educacion\": \"Educacion\",\n",
    "    \"equipamiento_mantenimientos_hogar\": \"Equipamiento_y_mantenimiento_del_hogar\",\n",
    "    \"equipamiento_mantenimiento_del_hogar\": \"Equipamiento_y_mantenimiento_del_hogar\",\n",
    "    \"nivel_general\": \"Nivel_general\",\n",
    "    \"prendas_vestir_calzado\": \"Prendas_de_vestir_y_calzado\",\n",
    "    \"recreacion_cultura\": \"Recreacion_y_cultura\",\n",
    "    \"restaurantes_hoteles\": \"Restaurantes_y_hoteles\",\n",
    "    \"salud\": \"Salud\",\n",
    "    \"transporte\": \"Transporte\",\n",
    "    \"vivienda_agua_electricidad_combustibles\": \"Vivienda,_agua,_electricidad,_gas_y_otros_combustibles\",\n",
    "}\n",
    "\n",
    "def normalize_category(cat_raw: str) -> str:\n",
    "    return CATEGORIES_MAP.get(cat_raw.lower(), cat_raw)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def api_csv(ids, start_date=2020):\n",
    "    \"\"\"Descarga CSV de varias series en un solo llamado (en chunks). Devuelve DF con columna date y columnas por id.\"\"\"\n",
    "    ids = list(ids)\n",
    "    chunks = [ids[i:i+15] for i in range(0, len(ids), 15)]  # 15 por URL para evitar límites\n",
    "    dfs = []\n",
    "    for ch in chunks:\n",
    "        params = {\n",
    "            \"ids\": \",\".join(ch),\n",
    "            \"format\": \"csv\",\n",
    "            \"start_date\": start_date\n",
    "        }\n",
    "        url = f\"{API_BASE_URL}series?{urllib.parse.urlencode(params)}\"\n",
    "        r = requests.get(url, timeout=60)\n",
    "        r.raise_for_status()\n",
    "        df = pd.read_csv(io.BytesIO(r.content))\n",
    "        # normalizo el nombre de la col de fecha\n",
    "        date_col = [c for c in df.columns if c.lower().startswith(\"indice_tiempo\") or c.lower() == \"time\"][0]\n",
    "        df.rename(columns={date_col: \"date\"}, inplace=True)\n",
    "        df[\"date\"] = pd.to_datetime(df[\"date\"])\n",
    "        dfs.append(df)\n",
    "    # merge por fecha\n",
    "    out = dfs[0]\n",
    "    for df in dfs[1:]:\n",
    "        out = out.merge(df, on=\"date\", how=\"outer\")\n",
    "    return out.sort_values(\"date\")\n",
    "\n",
    "def parse_region_and_category(alias: str):\n",
    "    # alias: p.ej. \"ipc_alimentos_bebidas_no_alcoholicas_cuyo\"\n",
    "    # saco el sufijo de región (último _token)\n",
    "    tokens = alias.split(\"_\")\n",
    "    maybe_region = tokens[-1].lower()\n",
    "    region = REGION_MAP.get(maybe_region, None)\n",
    "    if region:\n",
    "        cat_tokens = tokens[1:-1]  # quitar \"ipc\" y region\n",
    "    else:\n",
    "        # puede ser una tasa variación: p.ej. ipc_ng_nacional_tasa_variacion_mensual\n",
    "        # intentamos detectar región antes de \"tasa...\"\n",
    "        if \"tasa\" in tokens:\n",
    "            i = tokens.index(\"tasa\")\n",
    "            maybe_region = tokens[i-1].lower()\n",
    "            region = REGION_MAP.get(maybe_region, None)\n",
    "            cat_tokens = tokens[1:i-1]\n",
    "        else:\n",
    "            region = \"Nacional\"\n",
    "            cat_tokens = tokens[1:]\n",
    "    categoria = \"_\".join(cat_tokens)\n",
    "    return region, categoria\n",
    "\n",
    "def month_key(dt):\n",
    "    return f\"{dt.year:04d}_{dt.month:02d}\"\n",
    "\n",
    "def month_label(dt):\n",
    "    return f\"{MONTHS_ES[dt.month-1]} '{str(dt.year)[-2:]}\"\n",
    "\n",
    "def is_index_series(series_id: str, alias: str):\n",
    "    # Heurística simple: los índices arrancan con 146.3_I... o 148.3_INIVEL...\n",
    "    return series_id.startswith(\"146.3_I\") or \"nivel_general\" in alias\n",
    "\n",
    "def main():\n",
    "    os.makedirs(\"data\", exist_ok=True)\n",
    "\n",
    "    # 1) Descarga todo\n",
    "    ids = list(SERIES.keys())\n",
    "    df = api_csv(ids, start_date=2020)\n",
    "    # renombro columnas por alias legible\n",
    "    rename_map = {}\n",
    "    for sid, alias in SERIES.items():\n",
    "        if sid in df.columns:\n",
    "            rename_map[sid] = alias\n",
    "    df.rename(columns=rename_map, inplace=True)\n",
    "\n",
    "    # 2) BASE.json: para cada (Region, Categoria) que sea índice, pivoteo a wide por año_mes\n",
    "    base_rows = []\n",
    "    for sid, alias in SERIES.items():\n",
    "        if alias not in df.columns:  # por si alguna no volvió\n",
    "            continue\n",
    "        if not is_index_series(sid, alias):\n",
    "            continue  # no usar tasas en Base.json\n",
    "\n",
    "        region, categoria = parse_region_and_category(alias)\n",
    "        categoria = normalize_category(categoria)\n",
    "        row = {\n",
    "            \"Ordenamiento\": 1,\n",
    "            \"Region\": region,\n",
    "            \"Categoria\": categoria,\n",
    "            \"Cat_Level\": 1\n",
    "        }\n",
    "        for _, r in df[[\"date\", alias]].dropna().iterrows():\n",
    "            row[month_key(r[\"date\"])] = float(r[alias])\n",
    "        base_rows.append(row)\n",
    "\n",
    "    with open(\"data/Base.json\", \"w\", encoding=\"utf-8\") as f:\n",
    "        json.dump(base_rows, f, ensure_ascii=False, indent=4)\n",
    "\n",
    "    # 3) Inf_Mensual.json: variación m/m sobre los índices\n",
    "    inf_rows = []\n",
    "    for sid, alias in SERIES.items():\n",
    "        if alias not in df.columns:\n",
    "            continue\n",
    "        if not is_index_series(sid, alias):\n",
    "            continue  # las tasas m/m ya vienen en otras series; si querés usarlas, ver comentario abajo\n",
    "\n",
    "        region, categoria = parse_region_and_category(alias)\n",
    "        categoria = normalize_category(categoria)\n",
    "        s = df[[\"date\", alias]].dropna().sort_values(\"date\").reset_index(drop=True)\n",
    "        s[\"pct_m\"] = s[alias].pct_change()\n",
    "\n",
    "        # Si quisieras usar directamente las series tasa_variacion_mensual\n",
    "        # para \"nivel_general\", podrías reemplazar s[\"pct_m\"] por\n",
    "        # df[f\"ipc_ng_{region.lower()}_tasa_variacion_mensual\"]/100 cuando exista.\n",
    "\n",
    "        row = {\n",
    "            \"Ordenamiento\": 1,\n",
    "            \"Region\": region,\n",
    "            \"Categoria\": categoria\n",
    "        }\n",
    "        for _, r in s.iloc[1:].iterrows():  # salteo el primer NaN\n",
    "            row[month_label(r[\"date\"])] = float(r[\"pct_m\"])\n",
    "        inf_rows.append(row)\n",
    "\n",
    "    with open(\"data/Inf_Mensual.json\", \"w\", encoding=\"utf-8\") as f:\n",
    "        json.dump(inf_rows, f, ensure_ascii=False, indent=4)\n",
    "\n",
    "    print(\"✓ data/Base.json y data/Inf_Mensual.json actualizados.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36ec1336-e365-4761-b0fe-8e562bfb9ffc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
